#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Nov 17 01:47:50 2023

@author: mg
"""
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn import svm
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix, ConfusionMatrixDisplay

def mtrain_classifier(data_file, separator, kernel, max_iter, degree, C, gamma=None):
    separator = '|'
    MalwareDataset = pd.read_csv(data_file, sep=separator)
    
    #Debug. [splat]
    print("Dataset Shape:")
    print(MalwareDataset.shape)

    print("Columns in the dataset:")
    print(MalwareDataset.columns)

    print("Dataset Head:")
    print(MalwareDataset.head())

    print("Dataset Tail:")
    print(MalwareDataset.tail())
    
    #Use all data for training.
    Data = MalwareDataset.iloc[:, :].drop(['Name', 'md5'], axis=1).values
    
    #Debug. [splat]
    print("Dataset Shape after dropping columns:")
    print(Data.shape)
    
    X = Data[:, :-1]
    Y = Data[:, -1]

    #Split into training and testing sets.
    X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=0)

    #Standardize.
    sc = StandardScaler()
    scaler = sc.fit(X_train)
    X_train = scaler.transform(X_train)
    X_test = scaler.transform(X_test)

    #Convert max_iter to int.
    max_iter = int(max_iter)

    #Convert C to float.
    C = float(C)

    #Select the SVM classifier based on the kernel.
    if kernel == "linear":
        svm_clf = svm.SVC(kernel=kernel, max_iter=max_iter, C=C)
    elif kernel == "rbf":
        svm_clf = svm.SVC(kernel=kernel, gamma=gamma, max_iter=max_iter, C=C)
    elif kernel == "poly":
        svm_clf = svm.SVC(kernel=kernel, degree=degree, gamma=gamma, max_iter=max_iter, C=C)
    else:
        raise ValueError(f"Unsupported kernel: {kernel}")

    #Debug. [splat]
    print(f"Type of the SVM classifier before fitting: {type(svm_clf)}")

    #Fit the SVM classifier
    svm_clf = svm_clf.fit(X_train, Y_train)

    #Debug. [splat]
    print(f"Type of the SVM classifier after fitting: {type(svm_clf)}")

    #Make predictions on the test set
    y_pred = svm_clf.predict(X_test)

    # Calculate metrics
    accuracy = accuracy_score(Y_test, y_pred)
    precision = precision_score(Y_test, y_pred)
    recall = recall_score(Y_test, y_pred)
    f1 = f1_score(Y_test, y_pred)
    cm = confusion_matrix(Y_test, y_pred)

    #Store metrics in the classifier.
    svm_clf.metrics = {
        'accuracy': accuracy,
        'precision': precision,
        'recall': recall,
        'f1_score': f1,
        'confusion_matrix': cm
    }

    #Store Y the classifier.
    svm_clf.Y = Y_train

    print(f"Accuracy: {accuracy:.2f}, Precision: {precision:.2f}, Recall: {recall:.2f}, F1 Score: {f1:.2f}")
    print("Confusion Matrix:")
    print(cm)

    svm_clf.scaler = scaler
    return svm_clf