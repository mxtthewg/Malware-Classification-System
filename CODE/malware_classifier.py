#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat Nov 18 01:31:57 2023

@author: mg
"""
import joblib
import numpy as np
from sklearn.svm import SVC
from sklearn.exceptions import NotFittedError


def train_classifier(X, y, max_iter=1000):
    #Create and train the SVM classifier.
    classifier = SVC(max_iter=max_iter)
    classifier.fit(X, y)
    return classifier

def save_classifier(classifier, filename='malware_classifier.pkl'):
    #Save the classifier to a file, db check.
    joblib.dump(classifier, filename)

def load_classifier(filename='malware_classifier.pkl'):
    #Load the classifier from file.
    try:
        classifier = joblib.load(filename)
        return classifier
    except (FileNotFoundError, NotFittedError):
        raise ValueError("The provided malware_classifier is not a valid SVM classifier.")

def is_malware(feature_vector, trained_classifier):
    #Debug. [splat]
    print("Original Feature Vector:")
    print(feature_vector)
    feature_vector = feature_vector

    #Debug. [splat]
    print("Processed Feature Vector Dimensions:", feature_vector.shape)
    print("Number of Support Vectors:", len(trained_classifier.support_))

    #Debug. [splat]
    print("Feature Vector after dropping 'Name' and 'md5':")
    print(feature_vector)

     #Debug. [splat]

    print("Processed Feature Vector Dimensions:", feature_vector.shape)
    print("Number of Support Vectors:", len(trained_classifier.support_))

    #Normalize the feature vector.
    feature_vector_normalized = feature_vector / np.linalg.norm(feature_vector)

    #Debug. [splat]
    print("Normalized Feature Vector:")
    print(feature_vector_normalized)
    feature_vector_normalized = feature_vector_normalized.reshape(1, -1)

    #Predict the class of the feature vector.
    prediction = trained_classifier.predict(feature_vector_normalized)

    # Return the prediction
    return prediction[0]







def print_feature_vector_dimensions(feature_vector, trained_classifier):
    print("Feature Vector Dimensions:", len(feature_vector))
    print("Number of Support Vectors:", len(trained_classifier.support_))

